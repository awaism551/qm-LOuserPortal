import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";

import ApolloWrapper from "@/lib/apollo-provider";
import { ReactNode } from "react";
import { NextIntlClientProvider } from "next-intl";

interface Props {
  children: ReactNode;
  params: { locale: string };
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children, params }: Props) {
  const { locale } = params || { locale: 'en' };

  // Load translation file directly in the layout
  let messages: Record<string, string> = {};
  try {
    messages = (await import(`../locales/${locale}.json`)).default;
  } catch (error) {
    // Fallback to empty messages if locale file missing
    messages = {};
  }

  return (
    <NextIntlClientProvider messages={messages} locale={locale}>
      <ApolloWrapper>
        <div dir={locale === "ar" ? "rtl" : "ltr"} data-locale={locale} className={`${geistSans.variable} ${geistMono.variable}`}>
          {children}
        </div>
      </ApolloWrapper>
    </NextIntlClientProvider>
  );
}
